(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{271:function(e,t,i){"use strict";i.r(t);var a=i(0),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"local-search-cont-metaheuristics"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#local-search-cont-metaheuristics","aria-hidden":"true"}},[e._v("#")]),e._v(" Local Search (cont.) & Metaheuristics")]),e._v(" "),i("h2",{attrs:{id:"reviewing-hill-climbing-and-its-limitations"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#reviewing-hill-climbing-and-its-limitations","aria-hidden":"true"}},[e._v("#")]),e._v(" Reviewing Hill Climbing and its limitations")]),e._v(" "),i("p",[e._v("PRO —> Simple to implement."),i("br"),e._v("\nCON —> Stops on local optima.")]),e._v(" "),i("p",[e._v("Hill Climbing's simplicity is the same reason why it is limited. Its 'greedy' approach of only accepting a better neighbor (considering fitness), restraints it from finding better solutions. In other words, it gets stuck in local optima. Therefore, to overcome this limitation, we need a method that imposes fewer restrictions during the "),i("strong",[e._v("exploration")]),e._v(" of the search space.")]),e._v(" "),i("blockquote",[i("p",[e._v("Students inputs during class:\n"),i("br"),e._v('Random re-initialization of the solution once it gets "stuck" at a local optimum.\n'),i("br"),e._v("Create some sort of memory to the algorithm.")])]),e._v(" "),i("div",{staticClass:"tip custom-block"},[i("p",{staticClass:"custom-block-title"},[e._v("NOTE: When is Hill Climbing a preferred method?")]),e._v(" "),i("p",[e._v('When the fitness landscape is unimodal — meaning, it only has one optimum solution; the Global optimum. In this case, Hill Climbing will quickly arrive at the best solution, since its the only "local optima". The issue is that most real-world scenarios deal with fitness landscapes that contain multiple local optima.')])]),e._v(" "),i("p",[e._v("Maintaining a Local Search perspective — that is, navigating the search space through a neighborhood function — one way of improving the algorithm's exploration is by accepting a neighbor with an inferior fitness. This way, we provide the opportunity of escaping a local optimum.\nAt the same time, simply exploring the search space — that is, mindlessly accepting any neighbor — makes it impossible to achieve convergence. At some point, it's important to start exploiting the knowledge acquired about the fitness landscape.")]),e._v(" "),i("p",[e._v("That's one of the main ideas to keep in mind while working with random search algorithms: how to balance the algorithm's "),i("strong",[e._v("EXPLORATION")]),e._v(" (of the search space) vs its "),i("strong",[e._v("EXPLOITATION")]),e._v(" (of best solutions).")]),e._v(" "),i("p",[e._v("So now we'll have a look at another local search algorithm that looks for overcoming Hill Climbing's limitations while balancing an exploration vs exploitation process. A Metaheuristic method called Simulated Annealing."),i("br"),e._v("\nFirst, a quick definition of what are Metaheuristic methods...")]),e._v(" "),i("h2",{attrs:{id:"metaheuristic"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#metaheuristic","aria-hidden":"true"}},[e._v("#")]),e._v(" Metaheuristic")]),e._v(" "),i("ul",[i("li",[e._v('Heuristic: "to find"')]),e._v(" "),i("li",[e._v('Meta: "in an upper level"')])]),e._v(" "),i("h3",{attrs:{id:"what-is-a-metaheruistic-method"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#what-is-a-metaheruistic-method","aria-hidden":"true"}},[e._v("#")]),e._v(" What is a Metaheruistic Method?")]),e._v(" "),i("p",[e._v("A metaheuristic is formally defined as an iterative generation process which guides a subordinate heuristic by combining intelligently different concepts for "),i("strong",[e._v("exploring")]),e._v(" and "),i("strong",[e._v("exploiting")]),e._v(" the search space, [...] learning strategies are used to structure information in order to find efficiently near-optimal solutions. [Osman and Laporte 1996].")]),e._v(" "),i("h3",{attrs:{id:"fundamental-properties-of-metaheuristics-blum-and-roli-2003"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#fundamental-properties-of-metaheuristics-blum-and-roli-2003","aria-hidden":"true"}},[e._v("#")]),e._v(" Fundamental Properties of Metaheuristics [Blum and Roli 2003]")]),e._v(" "),i("ul",[i("li",[e._v("Metaheuristics are strategies that “guide” the search process.")]),e._v(" "),i("li",[e._v("The goal is to efficiently explore the search space in order to find (near-) optimal solutions.")]),e._v(" "),i("li",[e._v("Techniques which constitute metaheuristic algorithms range from simple local search procedures to complex learning processes.")]),e._v(" "),i("li",[e._v("Metaheuristic algorithms are approximate and usually non-deterministic.")]),e._v(" "),i("li",[e._v("They may incorporate mechanisms to avoid getting trapped in confined areas of the search space.")]),e._v(" "),i("li",[e._v("The basic concepts of metaheuristics permit an abstract level description.")]),e._v(" "),i("li",[e._v("Metaheuristics are not problem-specific.")]),e._v(" "),i("li",[e._v("Metaheuristics may make use of domain-specific knowledge in the form of heuristics that are controlled by the upper level strategy.")]),e._v(" "),i("li",[e._v("Today’s more advanced metaheuristics use search experience (embodied in some form of memory) to guide the search.")])])])}),[],!1,null,null,null);t.default=s.exports}}]);