(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{243:function(t,s,n){t.exports=n.p+"assets/img/search.11f9fdc6.png"},244:function(t,s,n){t.exports=n.p+"assets/img/86C444C3488FF006A4A14B75030C1A4E.86c444c3.png"},245:function(t,s,n){t.exports=n.p+"assets/img/68F5AA2554421DCE9CE7F6CFDB88F0C4.68f5aa25.png"},246:function(t,s,n){t.exports=n.p+"assets/img/50C12583936E866CA04AD6CCCF4E0AE3.50c12583.jpg"},247:function(t,s,n){t.exports=n.p+"assets/img/850BBCECD05BE8DF90534A873081EF8A.850bbcec.jpg"},248:function(t,s,n){t.exports=n.p+"assets/img/22E8AF80037BE47DBE3E85A2E374DC5F.22e8af80.jpg"},249:function(t,s,n){t.exports=n.p+"assets/img/B2D337055D3EC97C9AFE51FFFAAF52F1.b2d33705.jpg"},277:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"knapsack-problem-hill-climbing-project-completed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#knapsack-problem-hill-climbing-project-completed","aria-hidden":"true"}},[t._v("#")]),t._v(" Knapsack Problem & Hill Climbing project [completed]")]),t._v(" "),a("h4",{attrs:{id:"content"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#content","aria-hidden":"true"}},[t._v("#")]),t._v(" CONTENT:")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#tl-dr"}},[t._v("TL;DR")])]),a("li",[a("a",{attrs:{href:"#project-s-objective-and-overview"}},[t._v("Project's objective and overview")])]),a("li",[a("a",{attrs:{href:"#program-s-expected-output"}},[t._v("Program's expected output")])]),a("li",[a("a",{attrs:{href:"#program-s-building-blocks-and-how-they-relate-to-hill-climbing-s-search"}},[t._v("Program's building blocks and how they relate to Hill Climbing's search")]),a("ul",[a("li",[a("a",{attrs:{href:"#visually-hill-climbing-flowchart"}},[t._v("Visually: Hill Climbing flowchart")])])])]),a("li",[a("a",{attrs:{href:"#program-s-structure"}},[t._v("Program's structure")]),a("ul",[a("li",[a("a",{attrs:{href:"#inputs"}},[t._v("Inputs")])]),a("li",[a("a",{attrs:{href:"#functions"}},[t._v("Functions")])])])]),a("li",[a("a",{attrs:{href:"#to-dos-your-task-––-what-really-matters"}},[t._v("TO DOs (your task) <–– what really matters")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-objective-function"}},[t._v("1. objective_function")])]),a("li",[a("a",{attrs:{href:"#_2-generate-neighbor"}},[t._v("2. generate_neighbor")])]),a("li",[a("a",{attrs:{href:"#_3-get-best-neighbor"}},[t._v("3. get_best_neighbor")])])])]),a("li",[a("a",{attrs:{href:"#the-code-starting-point"}},[t._v("The code (starting point)")])]),a("li",[a("a",{attrs:{href:"#snippets-to-test-your-functions"}},[t._v("Snippets to test your functions")])]),a("li",[a("a",{attrs:{href:"#solutions"}},[t._v("Solutions")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-objective-function"}},[t._v("1. objective_function")])]),a("li",[a("a",{attrs:{href:"#_2-generate-neighbor"}},[t._v("2. generate_neighbor")])]),a("li",[a("a",{attrs:{href:"#_3-get-best-neighbor"}},[t._v("3. get_best_neighbor")])])])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"tl-dr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tl-dr","aria-hidden":"true"}},[t._v("#")]),t._v(" TL;DR")]),t._v(" "),a("p",[t._v("In this first project, your task is to implement the program's "),a("strong",[a("code",[t._v("objective_function")])]),t._v(", the "),a("strong",[a("code",[t._v("generate_neighbor")])]),t._v(" function — which integrates the "),a("strong",[a("code",[t._v("neighborhood_function")])]),t._v(" — and the "),a("strong",[a("code",[t._v("get_best_neighbor")])]),t._v(' function. More details in the "TO DOs" section.\nA secondary objective is to acquire an intuition on how an optimization algorithm could be translated and structured in code.')]),t._v(" "),a("h2",{attrs:{id:"project-s-objective-and-overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#project-s-objective-and-overview","aria-hidden":"true"}},[t._v("#")]),t._v(" Project's objective and overview")]),t._v(" "),a("p",[t._v('On top of finishing the program we started last class, through a "complete the code" approach the idea here is to give you a sense of the big picture. Develop an intuition on how the different parts of theory are translated into code and how they come together to build a functioning program.')]),t._v(" "),a("p",[t._v('Again, the "entities" we want to represent are:')]),t._v(" "),a("div",{staticClass:"language-plain extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# ----------------------------------------//\n#   INPUT    ->    [ ]     ->   OUTPUT\n# (PROBLEM)     ALGORITHM     (SOLUTION)\n# ----------------------------------------//\n")])])]),a("ul",[a("li",[t._v('Where "Problem" is the '),a("strong",[t._v("Knapsack Problem")]),t._v(" — a resource allocation scenario, which aims to maximize profit while respecting a constraint;")]),t._v(" "),a("li",[t._v('"Algorithm" is '),a("strong",[t._v("Hill Climbing")]),t._v(' — a "greedy" Local Search method; which implies the need for a Neighborhood structure;')]),t._v(" "),a("li",[t._v('and the "Solution Encoding" defined is a '),a("strong",[t._v("list of Booleans")]),t._v(" — e.g. "),a("code",[t._v("[True, False, True, True, False]")]),t._v(" — indicating if a specific object is included or not in the Knapsack.")])]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("OBJECTIVE")]),t._v(" "),a("p",[t._v("Our objective is to finish the program's implementation.\nNamely, the "),a("code",[t._v("objective_function")]),t._v(", the "),a("code",[t._v("generate_neighbor")]),t._v(" and "),a("code",[t._v("get_best_neighbor")]),t._v(" functions.")])]),t._v(" "),a("p",[t._v('More details in the "TODOs" section.'),a("br")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("For those comfortable with programming, I'd suggest an attempt on building the program from scratch. Have a look at the visual and textual description of the program's structure — its composing functions — and have a go. If its too vague to get started, grabing the "),a("strong",[a("code",[t._v("search()")])]),t._v(" function code might help.")]),t._v(" "),a("h2",{attrs:{id:"program-s-expected-output"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#program-s-expected-output","aria-hidden":"true"}},[t._v("#")]),t._v(" Program's expected output")]),t._v(" "),a("p",[t._v("Once completed, the program should be able to print Hill Climbing's search process to the console. Something like this:")]),t._v(" "),a("div",{staticClass:"language-plain extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Iteration 1: \nCurrent solution item(s) --\x3e ['Blue box', 'Orange box']\nCurrent solution fitness --\x3e 3\nBest neighbor item(s)    --\x3e ['Blue box', 'Orange box', 'Yellow box']\nBest neighbor fitness    --\x3e 13\n\n\nIteration 2: \nCurrent solution item(s) --\x3e ['Blue box', 'Orange box', 'Yellow box']\nCurrent solution fitness --\x3e 13\nBest neighbor item(s)    --\x3e ['Blue box', 'Orange box', 'Yellow box', 'Grey box']\nBest neighbor fitness    --\x3e 15\n\n\nIteration 3: \nCurrent solution item(s) --\x3e ['Blue box', 'Orange box', 'Yellow box', 'Grey box']\nCurrent solution fitness --\x3e 15\nBest neighbor item(s)    --\x3e ['Blue box', 'Yellow box', 'Grey box']\nBest neighbor fitness    --\x3e 14\n\n\nFinal solution: \n[False, True, True, True, True]\n")])])]),a("div",{staticClass:"warning custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v("The function responsible for printing the search iterations is called "),a("strong",[a("code",[t._v("print_search")])]),t._v(". Its an utility function included to help visualize Hill Climbing's process. Its not part of the algorithm itself.")])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"program-s-building-blocks-and-how-they-relate-to-hill-climbing-s-search"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#program-s-building-blocks-and-how-they-relate-to-hill-climbing-s-search","aria-hidden":"true"}},[t._v("#")]),t._v(" Program's building blocks and how they relate to Hill Climbing's search")]),t._v(" "),a("p",[t._v("When we break down the three main entities into an actual program, the building blocks we should think about are:")]),t._v(" "),a("blockquote",[a("p",[t._v("Decision variables"),a("br"),t._v("\nConstraint variable"),a("br"),t._v("\nBuild solution function"),a("br"),t._v("\nObjective function"),a("br"),t._v("\nSolution admissibility function"),a("br"),t._v("\nAlgorithm's Operator(s) function(s) —> e.g. "),a("code",[t._v("Neighborhood function")]),t._v(" in Local Search"),a("br"),t._v("\nSearch function (the algorithm)"),a("br")])]),t._v(" "),a("p",[t._v("Since our algorithm is "),a("strong",[t._v("Hill Climbing")]),t._v(" we will interconnect these building blocks by approximating its step-by-step instructions as follows:")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[a("code",[t._v("1. Initialize a random solution.")])]),a("br"),t._v(" "),a("strong",[a("em",[t._v("translating to code:")])]),t._v(" Call the "),a("code",[t._v("Build Solution function")]),t._v(" to generate a boolean list, where values are randomly selected.\nThen use the "),a("code",[t._v("Solution Admissibility Function")]),t._v(" to check if the created solution \"respects\" the problem's constraint.\nTo complete this first step, we should already check the solution's fitness — using the "),a("code",[t._v("Objective function")]),t._v(" — and store it in a variable (for example, "),a("code",[t._v("current_solution_fitness")]),t._v(")")])]),t._v(" "),a("li",[a("p",[a("strong",[a("code",[t._v("2. Repeat until stopping condition")])]),a("br"),t._v(" "),a("strong",[a("em",[t._v("translating to code:")])]),t._v("  Create a loop where its boolean expression checks at each iteration if the stopping condition was reached. We'll see later on what could be the stopping condition and why.")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[a("code",[t._v("2.1. Generate a y belonging to N(x) (i.e. a neighbor belonging to the current solution's neighborhood)")])]),a("br"),t._v(" "),a("strong",[a("em",[t._v("translating to code:")])]),t._v(" At this point, we should actually generate all neighbor solutions in the neighborhood at once, making it easier to check which one has the best fitness.\nWe'll implement a specific function for that called "),a("code",[t._v("generate_neighborhood")]),t._v(".\nNote: just as the Objective function is actually broken down into two (one to "),a("em",[t._v("calculate fitness")]),t._v(" and another to "),a("em",[t._v("check admissibility")]),t._v("), the Neighborhood function is also broken down into smaller parts. We'll look into it later on.")])]),t._v(" "),a("li",[a("p",[a("strong",[a("code",[t._v("2.2. If the fitness of y is better or equal to the fitness of x, then x := y")])]),a("br"),t._v(" "),a("strong",[a("em",[t._v("translating to code:")])]),t._v(' Once we generated all neighbor solutions in the previous step, we check all of their "fitness". If at least one of them has a higher fitness (remember its a maximization problem) then the "best" neighbor becomes the current solution.\nHere the subtasks are: use the Objective function to check each of the neighbors\' fitness and store them in a list.\nThen check which fitness is the highest and return the corresponding neighbor (i.e. the Boolean list that evaluates to the highest fitness value).\nTo conclude, check if the best neighbor\'s fitness is greater or equal to the current solution\'s fitness.\nIf '),a("em",[t._v("yes")]),t._v(", then the best neighbor becomes the current solution (e.g. "),a("code",[t._v("current_solution = best_neighbor")]),t._v(") and we repeat the process.\nIf "),a("em",[t._v("no")]),t._v(" (i.e. all neighbors have worst fitness), then we stop the loop.")])])])]),t._v(" "),a("li",[a("p",[a("strong",[a("code",[t._v("3. Return x (i.e. current solution)")])]),a("br"),t._v(" "),a("strong",[a("em",[t._v("translating to code:")])]),t._v(" After we leave the loop, return the current solution.")])])]),t._v(" "),a("h3",{attrs:{id:"visually-hill-climbing-flowchart"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#visually-hill-climbing-flowchart","aria-hidden":"true"}},[t._v("#")]),t._v(" Visually: Hill Climbing flowchart")]),t._v(" "),a("img",{staticClass:"my-wrapper my-img",attrs:{src:n(243)}}),t._v(" "),a("p",[t._v("So...\nIn code, the "),a("code",[t._v("Search function")]),t._v(', which serves as our "direct translation" of the algorithm (i.e. where we combine all building blocks), would look something like this:')]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ALGORITHM (Hill Climbing's Search Routine)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" weights"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" constraint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" search_iterations_limit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1. Initialize random solution.")]),t._v("\n    solution_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    solution "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" initialize_solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution_size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" weights"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" constraint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    solution_fitness "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" objective_function"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2. Repeat until — current_solution has best fitness in neighborhood – or – iterations limit is reached.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("search_iterations_limit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2.1. Generate current_solution's neighborhood.")]),t._v("\n        neighborhood "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" neighborhood_function"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" weights"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" constraint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Get best neighbor and its fitness from the neighborhood.")]),t._v("\n        best_neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" best_neighbor_fitness "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" get_best_neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("neighborhood"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2.2. If the best neighbor has a better fitness than the solution,")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# then it becomes the current solution.")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" best_neighbor_fitness "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" solution_fitness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            solution "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" best_neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            solution_fitness "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" best_neighbor_fitness\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If there are no neighbors with a better fitness than the current solution,")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# then we stop (i.e. break) the search.")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Once we exit the loop — either by reaching the limit of iterations")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or for not having a better neighbor — we return the solution.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" solution\n")])])]),a("h2",{attrs:{id:"program-s-structure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#program-s-structure","aria-hidden":"true"}},[t._v("#")]),t._v(" Program's structure")]),t._v(" "),a("p",[a("img",{attrs:{src:n(244),alt:"knapsack_image.png"}})]),t._v(" "),a("div",{staticClass:"warning custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v("We're starting at a further point than where we stopped in class. Here the code is already organized closer to what the final structure should look like.")])]),t._v(" "),a("br"),t._v(" "),a("p",[t._v("Apart from the "),a("strong",[a("code",[t._v("Search function")])]),t._v(" specified above, the program also consists of:")]),t._v(" "),a("h3",{attrs:{id:"inputs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inputs","aria-hidden":"true"}},[t._v("#")]),t._v(" Inputs")]),t._v(" "),a("h4",{attrs:{id:"decision-variables-constraint-variable-and-search-iterations-limit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#decision-variables-constraint-variable-and-search-iterations-limit","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("code",[t._v("Decision variables")]),t._v(", "),a("code",[t._v("Constraint variable")]),t._v(" and "),a("code",[t._v("Search iterations limit")])]),t._v(" "),a("p",[t._v("*Inputs are now passed in after "),a("code",[t._v('if __name__ == "__main__":')]),t._v("\nAgain, the program's structure has already evolved. In that sense, "),a("strong",[t._v("inputs are not hardcoded into the algorithm's code anymore.\nNow we're passing them through Python's "),a("code",[t._v('if __name__ == "__main__":')])]),t._v(" instruction. It's not exactly a "),a("strong",[a("code",[t._v("main()")])]),t._v(" function like in Java, but it has a similar purpose in this context.")]),t._v(" "),a("p",[t._v("———————————"),a("br"),t._v(" "),a("strong",[t._v("Decision variables")]),a("br"),t._v("\ngreen box, blue box, orange box, yellow box, grey box")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("values  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nweights "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("———————————"),a("br"),t._v(" "),a("strong",[t._v("Constraint variable")]),a("br"),t._v("\nBackpack's maximum weight capacity –—> 15kg")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("max_weight "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v("\n")])])]),a("p",[t._v("———————————"),a("br"),t._v(" "),a("strong",[t._v("Search iterations limit")]),a("br"),t._v('\nThis is a new stopping criteria we\'re introducing. The basic idea here is to avoid Hill Climbing running "forever" without improvement — e.g. if it reaches a "plateau" in the fitness landscape. For our scenario — with only 5 elements composing the decision variables — that wouldn\'t be a problem. However, in a vast search space that\'s something we need to keep in mind.')]),t._v(" "),a("p",[a("img",{attrs:{src:n(245),alt:"fitness_landscape.png"}})]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("search_iterations_limit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#functions","aria-hidden":"true"}},[t._v("#")]),t._v(" Functions")]),t._v(" "),a("p",[t._v("———————————"),a("br"),t._v(" "),a("strong",[t._v("Initialize Random Solution function")]),a("br"),t._v(" "),a("code",[t._v("Inputs –>")]),t._v(" Solution's size: <integer value> "),a("strong",[t._v("|")]),t._v(" Decision variable's weights: <integers list> "),a("strong",[t._v("|")]),t._v(" Max weight constrait: <integer value>"),a("br"),t._v(" "),a("code",[t._v("Purpose –>")]),t._v(" Wrapper function that calls "),a("strong",[a("code",[t._v("build_solution")])]),t._v(" and "),a("strong",[a("code",[t._v("is_admissible")])]),t._v(" functions. Ultimately, it creates a random solution that abides by the problem's constraint (max_weight). i.e. the algorithm's first step."),a("br"),t._v(" "),a("code",[t._v("Outputs –>")]),t._v(" Solution: <booleans list>")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",[t._v("Now we're separating the "),a("code",[t._v("Solution admissibility function")]),t._v(" from the "),a("code",[t._v("Build Solution function")]),t._v(". It will help our code become a bit more 'reusable' for future problems where there are no constraints. Also, it provides a semantical approximation to the algorithm's first step.")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("initialize_solution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution_size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" weights"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" constraint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    solution "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" build_solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution_size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" is_admissible"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" weights"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" constraint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        solution "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" build_solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution_size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" solution\n")])])]),a("p",[t._v("———————————"),a("br"),t._v(" "),a("strong",[t._v("Build Solution function")]),a("br"),t._v(" "),a("code",[t._v("Inputs –>")]),t._v(" Solution size: <integer value>"),a("br"),t._v(" "),a("code",[t._v("Purpose –>")]),t._v(" Function responsible to initialize a solution — returns a list of randomly selected booleans. The number of elements in this list is defined by the Solution size argument."),a("br"),t._v(" "),a("code",[t._v("Outputs –>")]),t._v(" Solution: <booleans list> (e.g. "),a("code",[t._v("[True, False, True, True, False]")]),t._v(")")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("build_solution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution_size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    solution "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    possible_values "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution_size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        randomly_selected_value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" choice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("possible_values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Note that `choice()` is an utility function that must be imported into the script. => `from random import choice`")]),t._v("\n        solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("randomly_selected_value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" solution\n")])])]),a("p",[t._v("———————————"),a("br"),t._v(" "),a("strong",[t._v("Solution Admissibility function")]),a("br"),t._v(" "),a("code",[t._v("Inputs –>")]),t._v(" Solution: <booleans list> "),a("strong",[t._v("|")]),t._v(" Weights (from our decision variables): <integers list> "),a("strong",[t._v("|")]),t._v(" Constraint (max_weight value): <integer value>."),a("br"),t._v(" "),a("code",[t._v("Purpose –>")]),t._v(" Check if solution's combined weight is under the contraint — i.e. under the maximum weight."),a("br"),t._v(" "),a("code",[t._v("Outputs –>")]),t._v(' Boolean value, which "answers" if '),a("code",[t._v("True")]),t._v(" (i.e. is admissible) or "),a("code",[t._v("False")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("is_admissible")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" weights"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" constraint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    weight_sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    solution_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution_size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  \n            weight_sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" weights"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" weight_sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" constraint\n")])])]),a("p",[t._v("——————————— "),a("br"),t._v(" "),a("strong",[t._v("Objective function")]),t._v(" "),a("br"),t._v(" "),a("code",[t._v("Inputs –>")]),t._v(" Solution: <booleans list> "),a("strong",[t._v("|")]),t._v(" Values <integers list> "),a("br"),t._v(" "),a("code",[t._v("Purpose –>")]),t._v(" Calculate the solution's fitness. "),a("br"),t._v(" "),a("code",[t._v("Outputs –>")]),t._v(" Fitness: <float value> or integer value — *for this specific problem, since all values in the Decision Variables are integers, it doesn't make much difference if the fitness is a float or an integer).")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# TODO: to be implemented.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("objective_function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n")])])]),a("p",[t._v("———————————"),a("br"),t._v(" "),a("strong",[t._v("Neighborhood function")]),a("br"),t._v(" "),a("code",[t._v("Inputs –>")]),t._v("  Solution: <booleans list> "),a("strong",[t._v("|")]),t._v(" Values: <integers list> "),a("strong",[t._v("|")]),t._v(" Weights: <integers list> "),a("strong",[t._v("|")]),t._v(" Constraint (max weight): <integer value>."),a("br"),t._v(" "),a("code",[t._v("Purpose –>")]),t._v(" From the solution, repeatedly call the "),a("code",[t._v("generate_neighbor")]),t._v(" function to build a neighbor solution (i.e. booleans list). If the generated neighbor is admissible, it is included in the neighborhood (i.e. a list of booleans list). The process is repeated until all possible neighbors were generated and tested for admissibility."),a("br"),t._v(" "),a("code",[t._v("Outputs –>")]),t._v(" Neighborhood: <list of booleans list>")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("neighborhood_function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" weights"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" constraint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    neighborhood "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        neighbor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" generate_neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" is_admissible"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" weights"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" constraint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            neighborhood"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" neighborhood\n")])])]),a("p",[t._v("———————————"),a("br"),t._v(" "),a("strong",[t._v("Generate Neighbor function")]),a("br"),t._v(" "),a("code",[t._v("Inputs –>")]),t._v("  Solution: <booleans list> "),a("strong",[t._v("|")]),t._v(" i (index): <integer value>"),a("br"),t._v(" "),a("code",[t._v("Purpose –>")]),t._v(" Build and return a neighbor to the solution."),a("br"),t._v(" "),a("code",[t._v("Outputs –>")]),t._v(" Neighbor: <booleans list>")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# TODO: to be implemented.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generate_neighbor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n")])])]),a("p",[t._v("———————————"),a("br"),t._v(" "),a("strong",[t._v("Get Best Neighbor function")]),a("br"),t._v(" "),a("code",[t._v("Inputs –>")]),t._v(" Neighborhood: <list of booleans list> "),a("strong",[t._v("|")]),t._v(" Values: <integers list>"),a("br"),t._v(" "),a("code",[t._v("Purpose –>")]),t._v(" Find the neighbor with the highest fitness in the neighborhood and return both (i.e. the neighbor and the fitness value)."),a("br"),t._v(" "),a("code",[t._v("Outputs –>")]),t._v(" Neighbor: <booleans list> "),a("strong",[t._v("|")]),t._v(" Fitness: <float or integer value>")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# TODO: to be implemented.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_best_neighbor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("neighborhood"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n")])])]),a("h2",{attrs:{id:"to-dos-your-task-––-what-really-matters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#to-dos-your-task-––-what-really-matters","aria-hidden":"true"}},[t._v("#")]),t._v(" TO DOs (your task) <–– what really matters")]),t._v(" "),a("p",[t._v("Your task is to implement the functions:")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("objective_function")])]),t._v(" "),a("li",[a("code",[t._v("generate_neighbor")])]),t._v(" "),a("li",[a("code",[t._v("get_best_neighbor")]),t._v(" "),a("br"),t._v("———————————")])]),t._v(" "),a("h3",{attrs:{id:"_1-objective-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-objective-function","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. "),a("code",[t._v("objective_function")])]),t._v(" "),a("p",[a("img",{attrs:{src:n(246),alt:"objective_function 1 lean.jpeg"}})]),t._v(" "),a("p",[t._v("Inputs:")]),t._v(" "),a("ul",[a("li",[t._v("Solution => a booleans list (e.g. "),a("code",[t._v("[True, False, False, True, True]")]),t._v(")")]),t._v(" "),a("li",[t._v("Values (decision variable with all objects' values in the search space) => an integers list (e.g. "),a("code",[t._v("[4, 2, 1, 10, 2]")]),t._v(")")])]),t._v(" "),a("p",[t._v("Expected Output:")]),t._v(" "),a("ul",[a("li",[t._v("Fitness => float value (in this case could be an integer as well)")])]),t._v(" "),a("p",[t._v("The objective function's purpose is to calculate a solution's fitness.\nIn our program, that means returning the sum of every object's value included in the solution.")]),t._v(" "),a("p",[t._v("———————————")]),t._v(" "),a("h3",{attrs:{id:"_2-generate-neighbor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-generate-neighbor","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. "),a("code",[t._v("generate_neighbor")])]),t._v(" "),a("p",[a("img",{attrs:{src:n(247),alt:"new_functions_imgs.001.jpeg"}})]),t._v(" "),a("p",[t._v("Inputs:")]),t._v(" "),a("ul",[a("li",[t._v("Solution")]),t._v(" "),a("li",[t._v("i (index) => an integer")])]),t._v(" "),a("p",[t._v("Expected Output:")]),t._v(" "),a("ul",[a("li",[t._v("Neighbor => a booleans list")])]),t._v(" "),a("p",[t._v("The generate neighbor function is called within the "),a("code",[t._v("neighborhood_function")]),t._v(" during search. Its purpose is to build and return one single neighbor to the solution — passed in as argument.\nIn our Knapsack Problem it does that by applying a "),a("strong",[t._v("Bit Flipping")]),t._v(" operation:")]),t._v(" "),a("ul",[a("li",[t._v("First copy the solution — in Python's lists we can achieve that by using the "),a("code",[t._v(".copy()")]),t._v(" method;")]),t._v(" "),a("li",[t._v('Then "flip" (i.e. invert) the value at the index indicated by the '),a("code",[t._v("i")]),t._v(" argument;")])]),t._v(" "),a("p",[a("img",{attrs:{src:n(248),alt:"new_functions_imgs.002.jpeg"}})]),t._v(" "),a("p",[t._v("———————————")]),t._v(" "),a("h3",{attrs:{id:"_3-get-best-neighbor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-get-best-neighbor","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. "),a("code",[t._v("get_best_neighbor")])]),t._v(" "),a("p",[a("img",{attrs:{src:n(249),alt:"get best - lean.jpeg"}})]),t._v(" "),a("p",[t._v("Inputs:")]),t._v(" "),a("ul",[a("li",[t._v("Neighborhood — all neighbor solutions to the current solution <list of booleans list>")]),t._v(" "),a("li",[t._v("Values (decision variable with all objects' values in the search space)")])]),t._v(" "),a("p",[t._v("Expected Outputs:")]),t._v(" "),a("ul",[a("li",[t._v("Best neighbor => booleans list that generates the highest fitness in the nerighborhood.")]),t._v(" "),a("li",[t._v("Best neighbor's fitness => float (for this problem, could be an integer)")])]),t._v(" "),a("p",[t._v("From the generated neighborhood, find the neighbor with the highest fitness and return both (i.e. the neighbor and the fitness value). The return statement within the function should look like this:")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_best_neighbor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("neighborhood"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# YOUR CODE ...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" best_neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" best_neighbor_fitness\n")])])]),a("div",{staticClass:"tip custom-block"},[a("p",[t._v("Since the "),a("code",[t._v("get_best_neighbor")]),t._v(" might be a bit confusing at first (i.e. returning two elements, something specific to Python, which in Java isn't allowed), I'm including the code to this function on a separate "),a("router-link",{attrs:{to:"/fpp/knapsack/get_best_neighbor/"}},[t._v("file")]),t._v(". I'd encourage you to try it first. Nonetheless, you have a working option just in case.")],1)]),t._v(" "),a("h2",{attrs:{id:"the-code-starting-point"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-code-starting-point","aria-hidden":"true"}},[t._v("#")]),t._v(" The code (starting point)")]),t._v(" "),a("p",[t._v("To start coding, just copy the code below and paste it in a "),a("code",[t._v(".py")]),t._v(" file within your IDE (VSCode, PyCharm, Sublime, etc...).\nRemeber to first create a folder (for VSCode, at least).")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ----------------------------------------//")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   INPUT    ->    [ ]     ->   OUTPUT")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (PROBLEM)     ALGORITHM     (SOLUTION)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ----------------------------------------//")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" random "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" choice\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ALGORITHM (Hill Climbing's Search Routine)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" weights"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" constraint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" search_iterations_limit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1. Initialize random solution.")]),t._v("\n    solution_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    solution "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" initialize_solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution_size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" weights"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" constraint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    solution_fitness "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" objective_function"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2. Repeat until — current_solution has best fitness in neighborhood – or – iterations limit is reached.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("search_iterations_limit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2.1. Generate current_solution's neighborhood.")]),t._v("\n        neighborhood "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" neighborhood_function"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" weights"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" constraint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Get best neighbor and its fitness from the neighborhood.")]),t._v("\n        best_neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" best_neighbor_fitness "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" get_best_neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("neighborhood"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        print_search"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" solution_fitness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" best_neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" best_neighbor_fitness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Utility function to follow the search process. You can ignore it.")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2.2. If the best neighbor has a better fitness than the solution,")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# then it becomes the current solution.")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" best_neighbor_fitness "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" solution_fitness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            solution "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" best_neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            solution_fitness "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" best_neighbor_fitness\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If there are no neighbors with a better fitness than the current solution,")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# then we stop (i.e. break) the search.")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Once we exit the loop — either by reaching the limit of iterations")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or for not having a better neighbor — we return the solution.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" solution\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ---------------------------------------------------------------------//")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Below are the functions that compose the algorithm's search function:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ---------------------------------------------------------------------//")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("initialize_solution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution_size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" weights"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" constraint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    solution "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" build_solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution_size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" is_admissible"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" weights"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" constraint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        solution "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" build_solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution_size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" solution\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("build_solution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution_size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    solution "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    possible_values "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution_size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        randomly_selected_value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" choice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("possible_values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("randomly_selected_value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" solution\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("is_admissible")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" weights"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" constraint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    weight_sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    solution_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution_size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  \n            weight_sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" weights"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" weight_sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" constraint\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# TODO: to be implemented.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("objective_function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# remove the line below before writing your code.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" NotImplementedError"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Objective function needs to be implemented"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("neighborhood_function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" weights"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" constraint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    neighborhood "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        neighbor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" generate_neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" is_admissible"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" weights"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" constraint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            neighborhood"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" neighborhood\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# TODO: to be implemented.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generate_neighbor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# remove the line below before writing your code.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" NotImplementedError"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Objective function needs to be implemented"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# TODO: to be implemented.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_best_neighbor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("neighborhood"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# remove the line below before writing your code.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" NotImplementedError"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Objective function needs to be implemented"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Utility function (not part of the algorithm)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print_search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" solution_fitness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" best_neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" best_neighbor_fitness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    solution_items "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    best_neighbor_items "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" best_neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        items_dictionary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Green"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Blue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Orange"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Yellow"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Grey"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        solution_items "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("items_dictionary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(' box"')])]),t._v(" \\\n                     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("enumerate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        best_neighbor_items "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("items_dictionary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(' box"')])]),t._v(" \\\n                     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("enumerate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("best_neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"Iteration ')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(': \\n"')])]),t._v("\n    message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"Current solution item(s) --\x3e ')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("solution_items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\\n"')])]),t._v("\n    message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"Current solution fitness --\x3e ')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("solution_fitness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\\n"')])]),t._v("\n    message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"Best neighbor item(s)    --\x3e ')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("best_neighbor_items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\\n"')])]),t._v("\n    message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"Best neighbor fitness    --\x3e ')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("best_neighbor_fitness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\\n\\n"')])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__main__"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# PROGRAM NEEDS 3 INITIAL INPUTS: Decision variables, Constraint variable, Number of iterations")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Decision variables")]),t._v("\n    values  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    weights "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Constraint")]),t._v("\n    max_weight "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Number of search iterations limit")]),t._v("\n    search_iterations_limit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Call the search function")]),t._v("\n    solution "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" search"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" weights"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" max_weight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" search_iterations_limit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Print result")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"Final solution: \\n')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"snippets-to-test-your-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#snippets-to-test-your-functions","aria-hidden":"true"}},[t._v("#")]),t._v(" Snippets to test your functions")]),t._v(" "),a("p",[t._v("Use the snippets below to individually test each function you create.")]),t._v(" "),a("h4",{attrs:{id:"_1-testing-objective-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-testing-objective-function","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. Testing "),a("code",[t._v("objective_function")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("objective_function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# YOUR CODE HERE")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# delete this line")]),t._v("\n\n\nvalues  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Decision variable")]),t._v("\nsolution "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Example solution")]),t._v("\nfitness "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" objective_function"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fitness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n")])])]),a("p",[t._v("Output should be "),a("code",[t._v("15")]),t._v(".")]),t._v(" "),a("h4",{attrs:{id:"_2-testing-generate-neighbor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-testing-generate-neighbor","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. Testing "),a("code",[t._v("generate_neighbor")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generate_neighbor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# YOUR CODE HERE")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# delete this line")]),t._v("\n\n\nsolution "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Example solution")]),t._v("\ni "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# index")]),t._v("\nneighbor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" generate_neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("Output should be "),a("code",[t._v("[False, True, False, True, True]")]),t._v(".")]),t._v(" "),a("h4",{attrs:{id:"_3-testing-get-best-neighbor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-testing-get-best-neighbor","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. Testing "),a("code",[t._v("get_best_neighbor")])]),t._v(" "),a("p",[t._v("Since your "),a("code",[t._v("get_best_neighbor")]),t._v(" function will probably use the "),a("code",[t._v("objective_function")]),t._v(" to evaluate the neighbors' fitness, you should isolate both to test the output.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("objective_function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# YOUR CODE HERE")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# delete this line")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_best_neighbor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("neighborhood"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# YOUR CODE HERE")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# delete this line")]),t._v("\n\n\nneighborhood "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nvalues  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Decision variable")]),t._v("\n\nbest_neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" best_neighbor_fitness "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" get_best_neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("neighborhood"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("best_neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("best_neighbor_fitness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("Output should be:\n"),a("br"),a("code",[t._v("[True, True, True, True, False]")]),t._v(" "),a("br"),a("code",[t._v("17")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"solutions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solutions","aria-hidden":"true"}},[t._v("#")]),t._v(" Solutions")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",[t._v("Remember, in programming there are always several possible solutions to the same problem.\n")])]),t._v(" "),a("h3",{attrs:{id:"_1-objective-function-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-objective-function-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. "),a("code",[t._v("objective_function")])]),t._v(" "),a("p",[t._v("Since the goal here was to calculate the solution's total value, the idea was to iterate through it and sum the value of each object included in the knapsack (i.e. objects that had a corresponding "),a("code",[t._v("True")]),t._v(" in the solution's boolean list).")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("objective_function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    fitness "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    solution_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution_size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            fitness "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fitness\n")])])]),a("h3",{attrs:{id:"_2-generate-neighbor-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-generate-neighbor-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. "),a("code",[t._v("generate_neighbor")])]),t._v(" "),a("p",[t._v('A neighbor in our knapsack problem, was a "copied" solution where we inverted only one value (e.g. '),a("code",[t._v("[True, False, False, True, True]")]),t._v(" became "),a("code",[t._v("[False, False, False, True, True]")]),t._v(")."),a("br"),t._v("\nThis method is called "),a("strong",[t._v('"Bit flipping"')]),t._v(" — from the idea that we're flipping a binary digit, since boolean values closely relate to binaries (1 / 0 ≈ True / False). "),a("br"),t._v('\nTo invert a boolean value, we could use the Logical "Not" operator — in Python its literally written '),a("code",[t._v("not")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generate_neighbor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    neighbor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# bit flip")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" neighbor\n")])])]),a("h3",{attrs:{id:"_3-get-best-neighbor-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-get-best-neighbor-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. "),a("code",[t._v("get_best_neighbor")])]),t._v(" "),a("p",[t._v("With "),a("code",[t._v("get_best_neighbor")]),t._v(" we wanted to loop through the neighbors included in the neighborhood, checking their fitness with the "),a("code",[t._v("objective_function")]),t._v(".")]),t._v(" "),a("p",[t._v('So, neighborhood was a "list of boolean lists".\nE.g. neighborhood:')]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("neighborhood "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v('Once we had all neighbors\' fitness stored in a list, we could "reach" for the highest one (maximization problem), and use its location in the fitness list to match with the location of the best_neighbor in the neighborhood — since they were generated in the same order.')]),t._v(" "),a("p",[t._v("At this point, we had created the "),a("code",[t._v("best_neighbor")]),t._v("'s boolean list and calculated the "),a("code",[t._v("best_neighbor")]),t._v("'s fitness. Since we would still need this fitness value in the Hill Climbing algorithm to check if the current solution has a better fitness compared to it, we can take advantage of having already calculated the neighbor's fitness and return both information from the "),a("code",[t._v("get_best_neighor")]),t._v(" function — i.e. the "),a("code",[t._v("best_neighbor")]),t._v(" and the "),a("code",[t._v("best_neighbor_fitness")]),t._v(".")]),t._v(" "),a("p",[t._v("It would look like this:")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_best_neighbor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("neighborhood"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    fitness_list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" neighbor "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" neighborhood"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        neighbor_fitness "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" objective_function"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        fitness_list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("neighbor_fitness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    best_neighbor_fitness "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fitness_list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    best_neighbor_index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fitness_list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("best_neighbor_fitness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    best_neighbor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" neighborhood"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("best_neighbor_index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" best_neighbor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" best_neighbor_fitness\n")])])]),a("hr"),t._v(" "),a("p",[t._v("That's all. Any doubts, let me know. "),a("a",{attrs:{href:"https://mcpo19.slack.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("Slack"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);